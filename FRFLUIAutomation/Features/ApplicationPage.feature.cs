// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FRFLUIAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ApplicationPage")]
    public partial class ApplicationPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ApplicationPage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ApplicationPage", "As a consumer I wanted to make a loan application from the online portal. ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Submit an Application")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("dr", "Beatrice", "James", "Wade", "1: 1", "1: 1", "59: 1965", "civilPartnership", "1: 0", "09875758599", "07875748598", "Wade1@mail.com", "1", "Swan", "12", "Hayes Road", "Southall", "Southall", "Nottinghamshire", "UB2 5HB", "2: 1", "12: 11", "councilTenancy", "fixedTermContract", "Acoustic Engineer", "Acoustic Consultants Ltd", "Swansea", "0987575858", "8: 7", "9: 8", "500", "weekly", "google", "EF03 NBE", "car", "Ford", "12321", "5001", "700", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("miss", "Sabrina", "John", "Dave", "2: 2", "4: 4", "49: 1975", "divorced", "2: 1", "+44 7654343221", "+44 7655343231", "Dave2@testmail.com", "7a", "Orpens Hill House", "1/1A", "Orpens Hill", "Birch", "Colchester", "Essex", "CO2 0LY", "13: 12", "3: 2", "forcesAccommodation", "Full Time Permanent", "Beauty Therapist", "Fresh Look", "Cardiff", "+44 7654343231", "7: 6", "8: 7", "1200", "fortnightly", "friendFamily", "EF03 NBE", "motorbike", "Honda", "12321", "5002", "800", "900", null)]
        [NUnit.Framework.TestCaseAttribute("mr", "Melody", "William", "Seth", "3: 3", "2: 2", "54: 1970", "livingwithpartner", "3: 2", "+44 8976543223", "+44 7976243213", "Seth3@mail.co.uk", "1", "18-19", "21", "Grosvenor Precinct", "Chester", "Chester", "Cheshire", "CH1 1EE", "10: 9", "4: 3", "homeowner", "partTimePermanent", "Acoustic Engineer-I", "Acoustic Consultants Ltd", "London", "44 8976543213", "6: 5", "7: 6", "2000", "fourWeekly", "motorDealer", "EF03 NBE", "unknown", "Toyota", "12321", "5003", "900", "800", null)]
        [NUnit.Framework.TestCaseAttribute("mrs", "Chrysta", "Thomas", "Ivan", "10: 10", "5: 5", "44: 1980", "married", "1: 0", "07876543235", "07876542231", "Ivan1@hotmail.com", "11", "South Ouston Farm", "12", "Stam Road", "Stamfordham", "Newcastle upon Tyne", "Northumberland", "NE18 0LD", "6: 5", "5: 4", "Housing Association", "seasonalWork", "Ambulance Controller", "Queens", "Nottingham", "07876543231", "5: 4", "6: 5", "2200", "monthly", "onlineAdvertising", "EF03 NBE", "van", "BMW", "12321", "5004", "1000", "700", null)]
        [NUnit.Framework.TestCaseAttribute("ms", "Christina", "David", "Riley", "11: 11", "10: 10", "39: 1985", "separated", "2: 1", "0987575850", "0787574858", "Riley2@gmail.com", "", "42", "42", "Hinckley Road", "", "Leicester", "Leicestershire", "LE3 0RB", "12: 11", "6: 5", "livingwithParents", "selfEmployed", "Health Advisor", "GetWell", "Birmingham", "0987575858", "6: 5", "5: 4", "35000", "annually", "facebook", "EF03 NBE", "car", "Audi", "12321", "5005", "1010", "600", null)]
        [NUnit.Framework.TestCaseAttribute("dr", "Vicki", "Robert", "Gilbert", "25: 25", "11: 11", "34: 1990", "single", "1: 0", "+44 7254343231", "+44 7674343231", "Gilbert3@mail.com", "", "Stonycroft", "21", "", "Bighton", "Alresford", "Hampshire", "SO24 9RE", "11: 10", "7: 6", "lodger", "temporaryEmploymentAgency", "IT Consultant", "ITES", "Liverpool", "+44 7654343231", "7: 6", "6: 5", "500", "weekly", "twitter", "EF03 NBE", "motorbike", "Mercedes", "12321", "5006", "1020", "500", null)]
        [NUnit.Framework.TestCaseAttribute("miss", "Molly", "Edward", "Jorge", "28: 28", "12: 12", "66: 1958", "widowed", "2: 1", "8376543243", "7977543213", "Jorge1@hotmail.com", "B", "Sharon Mansions", "34", "Lilley Road", "Liverpool", "Liverpool", "Merseyside", "L7 0LR", "3: 2", "6: 5", "other", "zeroHourContract", "Acoustic EngineerII", "Acoustic Consultants Ltd", "Manchester", "44 8976543213", "4: 3", "10: 9", "1200", "fortnightly", "magazinePaper", "EF03 NBE", "unknown", "Suzuki", "12321", "5007", "1030", "400", null)]
        [NUnit.Framework.TestCaseAttribute("mr", "Alison", "Lee", "Dan", "30: 30", "10: 10", "77: 1947", "livingwithpartner", "3: 2", "07576543251", "07876543771", "Dan1@testmail.com", "", "Squires Garden Centre", "21", "Holloway Hill", "Lyne", "Chertsey", "Surrey", "KT16 0AE", "7: 6", "5: 4", "privateTenancy", "fixedTermContract", "Zoo Keeper", "Chester Zoo", "Leeds", "07876543231", "3: 2", "11: 10", "2000", "fourWeekly", "TV", "EF03 NBE", "van", "Ford", "12321", "5008", "1040", "300", null)]
        [NUnit.Framework.TestCaseAttribute("mrs", "Miranda", "Mary", "Brian", "15: 15", "7: 7", "41: 1983", "married", "2: 1", "07856543331", "07876543121", "Brian1@mail.co.uk", "High", "Leigh", "11A", "Chelsfield Hill", "", "Orpington", "", "BR6 7SL", "9: 8", "5: 4", "tenantofEmployer", "selfEmployed", "HGV Driver", "Pets at home", "Glasgow", "07876543231", "2: 1", "12: 11", "2200", "monthly", "radio", "EF03 NBE", "car", "Ford", "12321", "5009", "1050", "200", null)]
        [NUnit.Framework.TestCaseAttribute("ms", "Stephanie", "Victoria", "Roberto", "8: 8", "9: 9", "43: 1981", "civilPartnership", "4: 3", "0917575848", "0787575448", "Roberto2@mail.co.uk", "The Studio", "Crispin Cottage", "9/a", "", "Underbarrow", "Kendal", "Cumbria", "LA8 8HJ", "100: 99", "3: 2", "homeowner", "temporaryEmploymentAgency", "Project Co-ordinator", "Cloud", "Edinburgh", "0987575858", "1: 0", "12: 11", "2000", "monthly", "other", "EF03 NBE", "van", "Ford", "12321", "5010", "1100", "100", null)]
        public void SubmitAnApplication(
                    string title, 
                    string forename, 
                    string middlename, 
                    string surname, 
                    string dobDay, 
                    string dobMonth, 
                    string dobYear, 
                    string status, 
                    string dependants, 
                    string hometel, 
                    string mobiletel, 
                    string email, 
                    string flatNumber, 
                    string buildingName, 
                    string buildingNumber, 
                    string street, 
                    string town, 
                    string city, 
                    string county, 
                    string postcode, 
                    string timeAtAddressYrs, 
                    string timeAtAddressMths, 
                    string residency, 
                    string employmentType, 
                    string occupation, 
                    string companyName, 
                    string workcity, 
                    string employmentTelephone, 
                    string employmentTimeSpentInJobYr, 
                    string employmentTimeSpentInJobM, 
                    string employmentTakeHomePay, 
                    string employmentIncomeFrequency, 
                    string howDidYouHearAboutUs, 
                    string vehicleReg, 
                    string vehicleType, 
                    string vehicleManufacturer, 
                    string vehicleMileage, 
                    string vehiclePrice, 
                    string cashDeposit, 
                    string partExchangeDeposit, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("forename", forename);
            argumentsOfScenario.Add("middlename", middlename);
            argumentsOfScenario.Add("surname", surname);
            argumentsOfScenario.Add("dobDay", dobDay);
            argumentsOfScenario.Add("dobMonth", dobMonth);
            argumentsOfScenario.Add("dobYear", dobYear);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("dependants", dependants);
            argumentsOfScenario.Add("hometel", hometel);
            argumentsOfScenario.Add("mobiletel", mobiletel);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("flatNumber", flatNumber);
            argumentsOfScenario.Add("buildingName", buildingName);
            argumentsOfScenario.Add("buildingNumber", buildingNumber);
            argumentsOfScenario.Add("street", street);
            argumentsOfScenario.Add("town", town);
            argumentsOfScenario.Add("city", city);
            argumentsOfScenario.Add("county", county);
            argumentsOfScenario.Add("postcode", postcode);
            argumentsOfScenario.Add("timeAtAddressYrs", timeAtAddressYrs);
            argumentsOfScenario.Add("timeAtAddressMths", timeAtAddressMths);
            argumentsOfScenario.Add("residency", residency);
            argumentsOfScenario.Add("employmentType", employmentType);
            argumentsOfScenario.Add("occupation", occupation);
            argumentsOfScenario.Add("companyName", companyName);
            argumentsOfScenario.Add("workcity", workcity);
            argumentsOfScenario.Add("employmentTelephone", employmentTelephone);
            argumentsOfScenario.Add("employmentTimeSpentInJobYr", employmentTimeSpentInJobYr);
            argumentsOfScenario.Add("employmentTimeSpentInJobM", employmentTimeSpentInJobM);
            argumentsOfScenario.Add("employmentTakeHomePay", employmentTakeHomePay);
            argumentsOfScenario.Add("employmentIncomeFrequency", employmentIncomeFrequency);
            argumentsOfScenario.Add("howDidYouHearAboutUs", howDidYouHearAboutUs);
            argumentsOfScenario.Add("vehicleReg", vehicleReg);
            argumentsOfScenario.Add("vehicleType", vehicleType);
            argumentsOfScenario.Add("vehicleManufacturer", vehicleManufacturer);
            argumentsOfScenario.Add("vehicleMileage", vehicleMileage);
            argumentsOfScenario.Add("vehiclePrice", vehiclePrice);
            argumentsOfScenario.Add("cashDeposit", cashDeposit);
            argumentsOfScenario.Add("partExchangeDeposit", partExchangeDeposit);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit an Application", "\t//Given the user on the admin portal", tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("the user on the FRFL Website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user fills the main applicant details {0},{1},{2},{3},{4},{5},{6},{7},{8},{9}" +
                            ",{10},{11}", title, forename, middlename, surname, dobDay, dobMonth, dobYear, status, dependants, hometel, mobiletel, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the address details {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}", flatNumber, buildingName, buildingNumber, street, town, city, county, postcode, timeAtAddressYrs, timeAtAddressMths, residency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("fills in the employment details {0},{1},{2},{3},{4},{5},{6},{7},{8}", employmentType, occupation, companyName, workcity, employmentTelephone, employmentTimeSpentInJobYr, employmentTimeSpentInJobM, employmentTakeHomePay, employmentIncomeFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("fills in the additional Info {0}", howDidYouHearAboutUs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("fills in the vehicle details {0},{1},{2},{3},{4},{5},{6}", vehicleReg, vehicleType, vehicleManufacturer, vehicleMileage, vehiclePrice, cashDeposit, partExchangeDeposit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("verify the information and click Apply! button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("the application should be submitted and gets the decision page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("click on the finish and close the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
